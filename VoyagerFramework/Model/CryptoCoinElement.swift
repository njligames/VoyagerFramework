//
//  CryptoCoin.swift
//  VoyagerIOSTest
//
//  Created by James Folk on 5/23/22.
//
// Generated by: https://app.quicktype.io/

import Foundation
import SwiftUI

// MARK: - CryptoCoin
struct CryptoCoin: Codable, Identifiable, Equatable {
    static func == (lhs: CryptoCoin, rhs: CryptoCoin) -> Bool {
        return lhs.id == rhs.id
    }
    
    var id = UUID()
    let pairSymbol, price, ask, bid: String
    let volume24Hr, changeAmt24Hr, changePct24Hr, high24Hr: String
    let low24Hr, high52W, low52W, circulation: String
    let marketCap: String
    let time: Int
    let stats: [Stat]
    
    var cryptoSymbol: String {
        get {
            pairSymbol.cryptoSymbol
        }
    }
    
    var timeStamp: String {
        get {
            let timeInterval = TimeInterval(time)
            let dateFormatter = DateFormatter()
            
            dateFormatter.dateFormat = "MMMM d, y h:m:s zzz"
            dateFormatter.timeZone = NSTimeZone(name: "UTC") as TimeZone?
            return dateFormatter.string(from: Date(timeIntervalSince1970: timeInterval))
        }
    }
    
    var hourChange: String {
        get {
            for stat in stats {
                if(stat.period == 1) {
                    guard let price = stat.price else { return "?" }
                    return price.currency
                }
            }
            return "?"
        }
    }
    
    var dayChange: String {
        get {
            for stat in stats {
                if(stat.period == 24) {
                    guard let price = stat.price else { return "?" }
                    return price.currency
                }
            }
            return "?"
        }
    }
    
    var weekChange: String {
        get {
            for stat in stats {
                if(stat.period == 168) {
                    guard let price = stat.price else { return "?" }
                    return price.currency
                }
            }
            return "?"
        }
    }
    
    var thirtyDayChange: String {
        get {
            for stat in stats {
                if(stat.period == 720) {
                    guard let price = stat.price else { return "?" }
                    return price.currency
                }
            }
            return "?"
        }
    }
    
    var yearChange: String {
        get {
            for stat in stats {
                if(stat.period == 8760) {
                    guard let price = stat.price else { return "?" }
                    return price.currency
                }
            }
            return "?"
        }
    }

    enum CodingKeys: String, CodingKey {
        case pairSymbol = "pair_symbol"
        case price, ask, bid
        case volume24Hr = "volume_24hr"
        case changeAmt24Hr = "change_amt_24hr"
        case changePct24Hr = "change_pct_24hr"
        case high24Hr = "high_24hr"
        case low24Hr = "low_24hr"
        case high52W = "high_52w"
        case low52W = "low_52w"
        case circulation
        case marketCap = "market_cap"
        case time, stats
    }
}

// MARK: - Stat
struct Stat: Codable {
    let period: Int
    let price: String?
}

typealias CryptoCoins = [CryptoCoin]

// MARK: - Static Data from Disk

let cryptoItems: CryptoCoins = processJSONData(filename: "priceData")

private func processJSONData<T: Decodable>(filename: String) -> T {
  let data: Data
  guard let file = Bundle.main.url(forResource: filename, withExtension: "json")
      else {
          fatalError("Couldn't find \(filename) in main bundle.")
  }
  
  do {
      data = try Data(contentsOf: file)
  } catch {
      fatalError("Couldn't load \(filename) from main bundle:\n\(error)")
  }
  
  do {
      let decoder = JSONDecoder()
      return try decoder.decode(T.self, from: data)
  } catch {
      fatalError("Couldn't parse \(filename) as \(T.self):\n\(error)")
  }
}
